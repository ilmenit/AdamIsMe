;
; File generated by cc65 v 2.18 - Git f75657d
;
	.fopt		compiler,"cc65 v 2.18 - Git f75657d"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_init_sfx
	.export		_play_sfx
	.export		_play_music
	.export		_stop_music
	.export		_pause_music
	.export		_continue_music
	.export		_audio_only_sfx
	.export		_currently_playing_track
	.export		_audio_volume
	.import		_wait_for_vblank

.segment	"BANKDATA"

.segment	"BANKDATA"
.segment	"BANKRODATA"
_currently_playing_track:
	.byte	$FF

.segment	"BANKDATA"

.segment	"BANKDATA"
_audio_only_sfx:
	.res	1,$00
_audio_volume:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ init_sfx (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_init_sfx: near

.segment	"BANKCODE"

;
; __asm__ ("jsr %w",SFX_NEW_INIT); // makes PAL/NTSC detection, stores the new VBI and enables it
;
	jsr     $AA50
;
; wait_for_vblank();
;
	jsr     _wait_for_vblank
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ play_sfx (unsigned char)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_play_sfx: near

.segment	"BANKCODE"

;
; {
;
	jsr     pusha
;
; MY_POKE(SFX_SFX_EFFECT,effect_number);
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $AAE6
;
; }
;
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ play_music (unsigned char)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_play_music: near

.segment	"BANKCODE"

;
; {
;
	jsr     pusha
;
; if (audio_only_sfx)
;
	lda     _audio_only_sfx
	jeq     L0084
;
; track_number = EMPTY_TRACK;
;
	ldx     #$00
	lda     #$22
	ldy     #$00
	sta     (sp),y
;
; else if (track_number == currently_playing_track)
;
	jmp     L0089
L0084:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     _currently_playing_track
	jsr     toseqax
	jeq     L0089
;
; return;
;
	jmp     L0083
;
; currently_playing_track = track_number;
;
L0089:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     _currently_playing_track
;
; MY_POKE(SFX_SOUND_ACTIVE, 1);
;
	ldx     #$00
	lda     #$01
	sta     $AAE9
;
; MY_POKE(SFX_TRACK_TO_PLAY,track_number);
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $AAE7
;
; wait_for_vblank();
;
	jsr     _wait_for_vblank
;
; }
;
L0083:	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ stop_music (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_stop_music: near

.segment	"BANKCODE"

;
; MY_POKE(SFX_SOUND_ACTIVE, 0); // disables playing music until set
;
	ldx     #$00
	lda     #$00
	sta     $AAE9
;
; wait_for_vblank();
;
	jsr     _wait_for_vblank
;
; MY_POKE(SFX_CALL_SILENCE, 1);
;
	ldx     #$00
	lda     #$01
	sta     $AAEA
;
; MY_POKE(currently_playing_track, EMPTY_TRACK); // disables playing music until set
;
	ldx     #$00
	lda     _currently_playing_track
	ldx     #$00
	jsr     pushax
	ldx     #$00
	lda     #$22
	ldy     #$00
	jsr     staspidx
;
; MY_POKE(SFX_TRACK_TO_PLAY, EMPTY_TRACK);
;
	ldx     #$00
	lda     #$22
	sta     $AAE7
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pause_music (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_pause_music: near

.segment	"BANKCODE"

;
; if (MY_PEEK(SFX_SOUND_ACTIVE) == 0)
;
	ldx     #$00
	lda     $AAE9
	cmp     #$00
	jsr     booleq
	jeq     L003E
;
; return;
;
	jmp     L003D
;
; if (currently_playing_track != EMPTY_TRACK)
;
L003E:	ldx     #$00
	lda     _currently_playing_track
	cmp     #$22
	jsr     boolne
	jeq     L0045
;
; for (audio_volume = 0; audio_volume < (255 - FADE_STEP); audio_volume += FADE_STEP)
;
	ldx     #$00
	lda     #$00
	sta     _audio_volume
L0044:	ldx     #$00
	lda     _audio_volume
	cmp     #$F7
	jsr     boolult
	jne     L0047
	jmp     L0045
;
; MY_POKE(SFX_RMTGLOBALVOLUMEFADE, audio_volume);
;
L0047:	ldx     #$00
	lda     _audio_volume
	sta     $8503
;
; wait_for_vblank();
;
	jsr     _wait_for_vblank
;
; for (audio_volume = 0; audio_volume < (255 - FADE_STEP); audio_volume += FADE_STEP)
;
	ldx     #$00
	lda     #$08
	clc
	adc     _audio_volume
	sta     _audio_volume
	jmp     L0044
;
; MY_POKE(SFX_SOUND_ACTIVE, 0); // disables playing music until set
;
L0045:	ldx     #$00
	lda     #$00
	sta     $AAE9
;
; wait_for_vblank();
;
	jsr     _wait_for_vblank
;
; MY_POKE(SFX_CALL_SILENCE, 1);
;
	ldx     #$00
	lda     #$01
	sta     $AAEA
;
; }
;
L003D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ continue_music (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_continue_music: near

.segment	"BANKCODE"

;
; if (MY_PEEK(SFX_SOUND_ACTIVE) == 1)
;
	ldx     #$00
	lda     $AAE9
	cmp     #$01
	jsr     booleq
	jeq     L005D
;
; return;
;
	jmp     L005C
;
; wait_for_vblank();
;
L005D:	jsr     _wait_for_vblank
;
; MY_POKE(SFX_CALL_SILENCE, 1); // reinit after disk IO
;
	ldx     #$00
	lda     #$01
	sta     $AAEA
;
; wait_for_vblank();
;
	jsr     _wait_for_vblank
;
; MY_POKE(SFX_RMTGLOBALVOLUMEFADE, 0xFF);
;
	ldx     #$00
	lda     #$FF
	sta     $8503
;
; MY_POKE(SFX_SOUND_ACTIVE, 1); // disables playing music until set
;
	ldx     #$00
	lda     #$01
	sta     $AAE9
;
; if (currently_playing_track != EMPTY_TRACK)
;
	ldx     #$00
	lda     _currently_playing_track
	cmp     #$22
	jsr     boolne
	jeq     L0072
;
; for (audio_volume = 0xFF; audio_volume > FADE_STEP; audio_volume -= FADE_STEP)
;
	ldx     #$00
	lda     #$FF
	sta     _audio_volume
L0071:	ldx     #$00
	lda     _audio_volume
	cmp     #$09
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0074
	jmp     L0072
;
; MY_POKE(SFX_RMTGLOBALVOLUMEFADE, audio_volume);
;
L0074:	ldx     #$00
	lda     _audio_volume
	sta     $8503
;
; wait_for_vblank();
;
	jsr     _wait_for_vblank
;
; for (audio_volume = 0xFF; audio_volume > FADE_STEP; audio_volume -= FADE_STEP)
;
	ldx     #$00
	lda     _audio_volume
	sec
	sbc     #$08
	sta     _audio_volume
	jmp     L0071
;
; MY_POKE(SFX_RMTGLOBALVOLUMEFADE, 0);
;
L0072:	ldx     #$00
	lda     #$00
	sta     $8503
;
; }
;
L005C:	rts

.endproc

