;
; File generated by cc65 v 2.18 - Git f75657d
;
	.fopt		compiler,"cc65 v 2.18 - Git f75657d"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_memcpy
	.import		_memory_objects_in_all_banks
	.import		_get_banked_address
	.import		_memory_select_bank
	.import		_objects
	.export		_undo_write_index
	.export		_undo_read_index
	.export		_write_to_bank
	.export		_read_from_bank
	.export		_undo_something_stored
	.export		_undo_start_index
	.export		_undo_index_max
	.export		_undo_buffer_crossed
	.export		_store_state
	.export		_restore_state
	.export		_undo
	.export		_redo
	.export		_reset_undo

.segment	"BANKDATA"

.segment	"DATA"
_undo_write_index:
	.byte	$00
_undo_read_index:
	.byte	$00
.segment	"BANKDATA"

.segment	"BANKRODATA"

.segment	"RODATA"
.segment	"BANKRODATA"

.segment	"BANKDATA"

.segment	"BANKDATA"
_undo_something_stored:
	.res	1,$00
_undo_start_index:
	.res	1,$00
_undo_index_max:
	.res	1,$00
_undo_buffer_crossed:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ write_to_bank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write_to_bank: near

.segment	"CODE"

;
; memcpy(get_banked_address(undo_write_index, sizeof(objects)), &objects, sizeof(objects));
;
	lda     _undo_write_index
	jsr     pusha0
	ldx     #$02
	lda     #$BC
	jsr     _get_banked_address
	jsr     pushax
	lda     #<(_objects)
	ldx     #>(_objects)
	jsr     pushax
	ldx     #$02
	lda     #$BC
	jsr     _memcpy
;
; memory_select_bank(BANK_NONE);
;
	lda     #$FF
	jmp     _memory_select_bank

.endproc

; ---------------------------------------------------------------
; void __near__ read_from_bank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_from_bank: near

.segment	"CODE"

;
; memcpy(&objects, get_banked_address(undo_read_index, sizeof(objects)), sizeof(objects));
;
	lda     #<(_objects)
	ldx     #>(_objects)
	jsr     pushax
	lda     _undo_read_index
	jsr     pusha0
	ldx     #$02
	lda     #$BC
	jsr     _get_banked_address
	jsr     pushax
	ldx     #$02
	lda     #$BC
	jsr     _memcpy
;
; memory_select_bank(BANK_NONE);
;
	lda     #$FF
	jmp     _memory_select_bank

.endproc

; ---------------------------------------------------------------
; void __near__ store_state (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_store_state: near

.segment	"BANKCODE"

;
; if (!undo_something_stored)
;
	lda     _undo_something_stored
	bne     L0063
;
; undo_read_index = 0; // set current read in a way that the next write will be to 0 
;
	sta     _undo_read_index
;
; undo_write_index = 0;
;
	sta     _undo_write_index
;
; undo_start_index = undo_index_max - 1;
;
	lda     _undo_index_max
	sec
	sbc     #$01
	sta     _undo_start_index
;
; undo_something_stored = true;
;
	lda     #$01
	sta     _undo_something_stored
;
; else
;
	jmp     L0079
;
; undo_write_index = undo_read_index;
;
L0063:	lda     _undo_read_index
	sta     _undo_write_index
;
; ++undo_write_index;
;
	inc     _undo_write_index
;
; if (undo_write_index == undo_index_max)
;
	lda     _undo_index_max
	cmp     _undo_write_index
	bne     L00B1
;
; undo_write_index = 0;
;
	lda     #$00
	sta     _undo_write_index
;
; if (undo_write_index == undo_start_index)
;
L00B1:	lda     _undo_start_index
	cmp     _undo_write_index
	bne     L0079
;
; ++undo_start_index;
;
	inc     _undo_start_index
;
; if (undo_start_index == undo_index_max)
;
	lda     _undo_index_max
	cmp     _undo_start_index
	bne     L0079
;
; undo_start_index = 0;
;
	lda     #$00
	sta     _undo_start_index
;
; write_to_bank();
;
L0079:	jsr     _write_to_bank
;
; undo_read_index = undo_write_index;  
;
	lda     _undo_write_index
	sta     _undo_read_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ restore_state (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_restore_state: near

.segment	"BANKCODE"

;
; if (!undo_something_stored)
;
	lda     _undo_something_stored
;
; read_from_bank();
;
	jne     _read_from_bank
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ undo (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_undo: near

.segment	"BANKDATA"

L0085:
	.res	1,$00

.segment	"BANKCODE"

;
; if (!undo_something_stored)
;
	lda     _undo_something_stored
	bne     L0086
;
; return false; 
;
	tax
	rts
;
; prev_index = undo_read_index;
;
L0086:	lda     _undo_read_index
	sta     L0085
;
; if (undo_read_index==0)
;
	lda     _undo_read_index
	bne     L00B3
;
; undo_read_index = undo_index_max-1;
;
	lda     _undo_index_max
	sec
	sbc     #$01
	sta     _undo_read_index
;
; else
;
	jmp     L00B4
;
; --undo_read_index;
;
L00B3:	dec     _undo_read_index
;
; if (undo_read_index == undo_start_index)
;
L00B4:	lda     _undo_start_index
	cmp     _undo_read_index
	bne     L0092
;
; undo_read_index = prev_index;
;
	lda     L0085
	sta     _undo_read_index
;
; return false;
;
	ldx     #$00
	txa
	rts
;
; restore_state();
;
L0092:	jsr     _restore_state
;
; return true;
;
	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ redo (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_redo: near

.segment	"BANKCODE"

;
; if (!undo_something_stored)
;
	lda     _undo_something_stored
	bne     L009A
;
; return false;
;
	tax
	rts
;
; if (undo_read_index == undo_write_index)
;
L009A:	lda     _undo_write_index
	cmp     _undo_read_index
	bne     L00B7
;
; return false;
;
	ldx     #$00
	txa
	rts
;
; ++undo_read_index;
;
L00B7:	inc     _undo_read_index
;
; if (undo_read_index == undo_index_max)
;
	lda     _undo_index_max
	cmp     _undo_read_index
	bne     L00A1
;
; undo_read_index = 0;
;
	lda     #$00
	sta     _undo_read_index
;
; restore_state();
;
L00A1:	jsr     _restore_state
;
; return true;
;
	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset_undo (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_reset_undo: near

.segment	"BANKCODE"

;
; undo_index_max = memory_objects_in_all_banks(sizeof(objects));
;
	ldx     #$02
	lda     #$BC
	jsr     _memory_objects_in_all_banks
	sta     _undo_index_max
;
; undo_something_stored = false; // nothing is stored
;
	lda     #$00
	sta     _undo_something_stored
;
; }
;
	rts

.endproc

