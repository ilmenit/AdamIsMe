# Main memory block is loaded after RMT music 
FEATURES {
	# must be $2000 because we load alligned GFX data there
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    __RMT_SIZE__:        value = $2B00, type = weak;
	__RAM_AVAIL__:       value = $BC20, type = weak; # consider changing to $BFFF
    __FILEHDR__:          type = import;
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak, value = $100; # small stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {
    ZP:         file = "", define = yes, start = $0082, size = $0035;
	# first load chunk
    HEADER:     file = %O,               start = $0000, size = $0002;

	# second load chunk
    FSTHDR: start = $0000, size = $4, file = %O;        
    RAM_BANK: start = %S, size = $8000 - %S, file = %O;

	# discard from loading RMT data that will be merged in binary way
    DISCARD: start = $8000, size = __RMT_SIZE__, file = "";

	# add RMT data
    RMT:        file = %O,               start = $0000, size = $3000;	
	
	# third load chunk

    SECHDR: start = $0000, size = $4, file = %O;        # second load chunk
    RAM: start = $8000 + __RMT_SIZE__, size = __RAM_AVAIL__ - $8000 - __RMT_SIZE__, file = %O;

    TRAILER:    file = %O,               start = $0000, size = $0006;
}
SEGMENTS {
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    FILEHDR:   load = HEADER, type = ro;                     # discarded old EXE header

###########
    NEXEHDR: load = FSTHDR, type = ro;                  # first load chunk

	# first we load GFX data to $2000, which is out of actual $4000 BANK 
    GFX:       load = RAM_BANK, type = rw, start=$2000, define = yes;
    STARTUP:   load = RAM_BANK, type = ro, start=$4000, define = yes;
    ONCE:      load = RAM_BANK, type = ro,                optional = yes;
    INIT:      load = RAM_BANK, type = rw,                optional = yes;
    BANKDATA:      load = RAM_BANK, type = rw, define = yes, optional = yes;
    BANKRODATA:    load = RAM_BANK, type = ro, define = yes, optional = yes;
    BANKCODE:      load = RAM_BANK, type = rw, define = yes, optional = yes;
    FIRST_END: load = RAM_BANK, type = ro, define = yes;
###########
    SFX:       load = RMT,   type = rw; # start = $9000, size reserved = $3000 up to $BAE4 (currently size=$2AE4)

###########
    CHKHDR:    load = SECHDR,    type = ro;                   # second load chunk
    LOWCODE:   load = RAM,       type = ro, define = yes;	
    LOWDATA:   load = RAM,       type = rw, define = yes, optional = yes; # for data out of banked area
    DATA:      load = RAM, type = rw, define = yes;
    RODATA:    load = RAM, type = ro, define = yes;
    CODE:      load = RAM, type = rw, define = yes;
    BSS:       load = RAM,       type = bss, define = yes;
    AUTOSTRT:  load = TRAILER,   type = ro;

}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
