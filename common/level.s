;
; File generated by cc65 v 2.18 - Git f75657d
;
	.fopt		compiler,"cc65 v 2.18 - Git f75657d"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_memset
	.import		_load_level_data
	.import		_set_tileset
	.import		_set_palette
	.export		_load_level
	.export		_decode_level
	.importzp	_local_x
	.importzp	_local_y
	.importzp	_local_index
	.importzp	_local_type
	.importzp	_local_text_type
	.importzp	_local_temp1
	.importzp	_local_temp2
	.importzp	_array_index
	.importzp	_array_value
	.import		_level_number
	.import		_game_progress
	.import		_objects
	.import		_map
	.import		_last_obj_index
	.import		_last_text_index
	.import		_map_lookup
	.export		_decode_galaxy
	.export		_decode_standard_level

; ---------------------------------------------------------------
; void __near__ load_level (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_load_level: near

.segment	"BANKCODE"

;
; load_level_data();
;
	jsr     _load_level_data
;
; decode_level();
;
	jsr     _decode_level
;
; set_palette();
;
	jsr     _set_palette
;
; set_tileset();
;
	jmp     _set_tileset

.endproc

; ---------------------------------------------------------------
; void __near__ decode_level (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_decode_level: near

.segment	"BANKCODE"

;
; if (level_number == LEVEL_GALAXY)
;
	lda     _level_number
	cmp     #$40
;
; decode_galaxy();
;
	jeq     _decode_galaxy
;
; decode_standard_level();
;
	jmp     _decode_standard_level

.endproc

; ---------------------------------------------------------------
; void __near__ decode_galaxy (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_decode_galaxy: near

.segment	"BANKCODE"

;
; for (local_y = 0; local_y < MAP_SIZE_Y; ++local_y)
;
	lda     #$00
	sta     _local_y
L0103:	lda     _local_y
	cmp     #$0C
	bcc     L010E
;
; }
;
	rts
;
; for (local_x = 0; local_x < MAP_SIZE_X; ++local_x)
;
L010E:	lda     #$00
	sta     _local_x
L0104:	lda     _local_x
	cmp     #$14
	jcs     L010A
;
; MapGet(local_x, local_y, local_type);
;
	ldy     _local_y
	lda     _map_lookup,y
	clc
	adc     _local_x
	sta     _array_index
	ldy     _array_index
	lda     _map,y
	sta     _local_type
;
; if (local_type == DECODE_SHUTTLE)
;
	cmp     #$26
	bne     L0107
;
; if (game_progress.landed_x == 0xFF) // initial loading when game is starting
;
	lda     _game_progress+2
	cmp     #$FF
	bne     L0105
;
; game_progress.galaxy_x = local_x;
;
	lda     _local_x
	sta     _game_progress
;
; game_progress.galaxy_y = local_y;
;
	lda     _local_y
	sta     _game_progress+1
;
; if (game_progress.completed_levels != LEVELS_MAX) // EDITOR
;
L0105:	lda     _game_progress+4
	cmp     #$41
	beq     L0106
;
; MapSet(local_x, local_y, LEVEL_DECODE_EMPTY);
;
	ldy     _local_y
	lda     _map_lookup,y
	clc
	adc     _local_x
	sta     _array_index
L0106:	lda     #$3F
;
; else if (local_type >= DECODE_WORLDS_MIN && local_type < DECODE_WORLDS_MAX)
;
	jmp     L010D
L0107:	lda     _local_type
	cmp     #$08
	bcs     L0109
;
; local_temp1 = local_type - DECODE_WORLDS_MIN;
;
	sta     _local_temp1
;
; local_temp2 = 5 * local_temp1;
;
	ldx     #$00
	lda     _local_temp1
	jsr     mulax5
	sta     _local_temp2
;
; if (game_progress.completed_levels < local_temp2)
;
	lda     _game_progress+4
	cmp     _local_temp2
	bcs     L0109
;
; local_temp1 += DECODE_LOCKS_MIN;
;
	lda     #$18
	clc
	adc     _local_temp1
	sta     _local_temp1
;
; MapSet(local_x, local_y, local_temp1);
;
	ldy     _local_y
	lda     _map_lookup,y
	clc
	adc     _local_x
	sta     _array_index
	lda     _local_temp1
L010D:	sta     _array_value
	ldy     _array_index
	lda     _array_value
	sta     _map,y
;
; for (local_x = 0; local_x < MAP_SIZE_X; ++local_x)
;
L0109:	inc     _local_x
	jmp     L0104
;
; for (local_y = 0; local_y < MAP_SIZE_Y; ++local_y)
;
L010A:	inc     _local_y
	jmp     L0103

.endproc

; ---------------------------------------------------------------
; void __near__ decode_standard_level (void)
; ---------------------------------------------------------------

.segment	"BANKCODE"

.proc	_decode_standard_level: near

.segment	"BANKCODE"

;
; local_index = 0;
;
	lda     #$00
	sta     _local_index
;
; memset(objects.direction, DIR_KILLED, sizeof(objects.direction));
;
	tay
	lda     #$08
L007E:	sta     _objects+560,y
	iny
	cpy     #$8C
	bne     L007E
;
; for (local_temp1 = DECODING_WORDS; local_temp1 <= DECODING_OBJECTS; ++local_temp1)
;
	lda     #$00
	sta     _local_temp1
L0111:	lda     _local_temp1
	cmp     #$02
	jcs     L0128
;
; local_text_type = LEVEL_DECODE_EMPTY;
;
	lda     #$3F
	sta     _local_text_type
;
; for (local_y = 0; local_y < MAP_SIZE_Y; ++local_y)
;
	lda     #$00
	sta     _local_y
L0112:	lda     _local_y
	cmp     #$0C
	jcs     L0126
;
; for (local_x = 0; local_x < MAP_SIZE_X; ++local_x)
;
	lda     #$00
	sta     _local_x
L0113:	lda     _local_x
	cmp     #$14
	jcs     L0125
;
; MapGet(local_x, local_y, local_type);
;
	ldy     _local_y
	lda     _map_lookup,y
	clc
	adc     _local_x
	sta     _array_index
	ldy     _array_index
	lda     _map,y
	sta     _local_type
;
; local_temp2 = DECODE_DIRECTION(local_type);
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _local_temp2
;
; local_type &= ENCODING_MASK;
;
	lda     _local_type
	and     #$3F
	sta     _local_type
;
; if (local_temp1 == DECODING_WORDS)
;
	lda     _local_temp1
	bne     L0121
;
; if (local_type < TYPE_MAX || local_type >= (TYPE_MAX + PROPERTY_MAX + TYPE_MAX + OPERATOR_MAX))
;
	lda     _local_type
	cmp     #$10
	bcc     L0114
	cmp     #$33
	bcc     L0115
;
; local_type = LEVEL_DECODE_EMPTY;
;
L0114:	lda     #$3F
	sta     _local_type
;
; else
;
	jmp     L0123
;
; local_text_type = local_type;
;
L0115:	lda     _local_type
	sta     _local_text_type
;
; local_type = TYPE_TEXT;
;
	lda     #$0F
	sta     _local_type
;
; if (local_text_type >= TYPE_MAX && local_text_type < (TYPE_MAX + TYPE_MAX))
;
	lda     _local_text_type
	cmp     #$10
	bcc     L0119
	cmp     #$20
	bcs     L0119
;
; local_text_type -= TYPE_MAX;
;
	sec
	sbc     #$10
;
; else if (local_text_type >= (TYPE_MAX + TYPE_MAX) && local_text_type < (TYPE_MAX + TYPE_MAX + PROPERTY_MAX))
;
	jmp     L0110
L0119:	lda     _local_text_type
	cmp     #$20
	bcc     L011D
	cmp     #$30
	bcs     L011D
;
; local_text_type -= TYPE_MAX;
;
	sec
	sbc     #$10
;
; else if (local_text_type >= (TYPE_MAX + TYPE_MAX + PROPERTY_MAX) && local_text_type < (TYPE_MAX + TYPE_MAX + PROPERTY_MAX + OPERATOR_MAX))
;
	jmp     L0110
L011D:	lda     _local_text_type
	cmp     #$30
	bcc     L0123
	cmp     #$33
	bcs     L0123
;
; local_text_type -= (TYPE_MAX + PROPERTY_MAX + TYPE_MAX);
;
	sec
	sbc     #$30
	sta     _local_text_type
;
; local_text_type |= AS_OPERATOR;
;
	ora     #$20
;
; else // decoding objects
;
	jmp     L0110
;
; if (local_type >= TYPE_MAX)
;
L0121:	lda     _local_type
	cmp     #$10
	bcc     L0122
;
; local_type = LEVEL_DECODE_EMPTY;
;
	lda     #$3F
	sta     _local_type
;
; else
;
	jmp     L0123
;
; local_text_type = local_type;
;
L0122:	lda     _local_type
L0110:	sta     _local_text_type
;
; if (local_type != LEVEL_DECODE_EMPTY)
;
L0123:	lda     _local_type
	cmp     #$3F
	beq     L0124
;
; objects.type[local_index] = local_type;
;
	ldy     _local_index
	lda     _local_type
	sta     _objects+280,y
;
; objects.text_type[local_index] = local_text_type;
;
	ldy     _local_index
	lda     _local_text_type
	sta     _objects+420,y
;
; objects.x[local_index] = local_x;
;
	ldy     _local_index
	lda     _local_x
	sta     _objects,y
;
; objects.y[local_index] = local_y;
;
	ldy     _local_index
	lda     _local_y
	sta     _objects+140,y
;
; objects.direction[local_index] = local_temp2;
;
	ldy     _local_index
	lda     _local_temp2
	sta     _objects+560,y
;
; ++local_index;
;
	inc     _local_index
;
; for (local_x = 0; local_x < MAP_SIZE_X; ++local_x)
;
L0124:	inc     _local_x
	jmp     L0113
;
; for (local_y = 0; local_y < MAP_SIZE_Y; ++local_y)
;
L0125:	inc     _local_y
	jmp     L0112
;
; if (local_temp1 == DECODING_WORDS)
;
L0126:	lda     _local_temp1
	bne     L0127
;
; last_text_index = local_index;
;
	lda     _local_index
	sta     _last_text_index
;
; for (local_temp1 = DECODING_WORDS; local_temp1 <= DECODING_OBJECTS; ++local_temp1)
;
L0127:	inc     _local_temp1
	jmp     L0111
;
; last_obj_index = local_index;
;
L0128:	lda     _local_index
	sta     _last_obj_index
;
; }
;
	rts

.endproc

